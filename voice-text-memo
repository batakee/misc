<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>音声メモアプリ</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 10px;
            max-width: 100%;
            box-sizing: border-box;
        }
        .container {
            display: grid;
            grid-template-columns: 1fr 60px;
            gap: 10px;
            background-color: #f5f5f5;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .main-content {
            grid-column: 1;
        }
        .button-container {
            grid-column: 2;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        h1 {
            font-size: 1.5rem;
            margin: 0 0 10px 0;
        }
        textarea {
            width: 100%;
            height: 150px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
            box-sizing: border-box;
        }
        button {
            width: 100%;
            background-color: #4CAF50;
            color: white;
            padding: 15px 0;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            justify-content: center;
            word-break: break-word;
            text-align: center;
            min-height: 50px;
        }
        button:hover {
            background-color: #45a049;
        }
        #stopRecord {
            background-color: #f44336;
        }
        #stopRecord:hover {
            background-color: #da190b;
        }
        #startRecord {
            background-color: #2196F3;
        }
        #startRecord:hover {
            background-color: #0b7dda;
        }
        .status {
            margin-top: 10px;
            padding: 10px;
            border-radius: 4px;
            grid-column: 1 / -1;
        }
        .recording {
            background-color: #ffebee;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main-content">
            <h1>音声メモ</h1>
            <form id="memoForm">
                <textarea id="memoText" name="memoText" placeholder="ここに音声が文字として表示されます"></textarea>
            </form>
        </div>
        <div class="button-container">
            <button type="button" id="stopRecord">停止</button>
            <button type="button" id="startRecord">開始</button>
            <button type="submit" form="memoForm">送信</button>
        </div>
        <div id="status" class="status"></div>
    </div>

    <script>
        let recognition;
        const startRecordButton = document.getElementById('startRecord');
        const stopRecordButton = document.getElementById('stopRecord');
        const memoText = document.getElementById('memoText');
        const status = document.getElementById('status');
        const form = document.getElementById('memoForm');

        // GASのデプロイURLを設定
        const GAS_URL = '[GASのデプロイURL]';

        // 音声認識の設定
        if ('webkitSpeechRecognition' in window) {
            recognition = new webkitSpeechRecognition();
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.lang = 'ja-JP';

            recognition.onresult = function(event) {
                let finalTranscript = '';
                let interimTranscript = '';

                for (let i = event.resultIndex; i < event.results.length; i++) {
                    const transcript = event.results[i][0].transcript;
                    if (event.results[i].isFinal) {
                        finalTranscript += transcript;
                    } else {
                        interimTranscript += transcript;
                    }
                }

                memoText.value = finalTranscript || interimTranscript;
            };

            recognition.onerror = function(event) {
                status.textContent = 'エラーが発生しました: ' + event.error;
            };

            recognition.onend = function() {
                status.textContent = '音声入力が終了しました';
                status.classList.remove('recording');
                startRecordButton.disabled = false;
                stopRecordButton.disabled = true;
            };
        }

        // 音声入力開始
        startRecordButton.addEventListener('click', function() {
            if (recognition) {
                recognition.start();
                status.textContent = '音声入力中...';
                status.classList.add('recording');
                startRecordButton.disabled = true;
                stopRecordButton.disabled = false;
            } else {
                status.textContent = 'お使いのブラウザは音声入力に対応していません';
            }
        });

        // 音声入力停止
        stopRecordButton.addEventListener('click', function() {
            if (recognition) {
                recognition.stop();
                stopRecordButton.disabled = true;
            }
        });

        // 初期状態で停止ボタンを無効化
        stopRecordButton.disabled = true;

        // フォーム送信の処理
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!memoText.value.trim()) {
                alert('メモを入力してください');
                return;
            }

            try {
                const formData = new FormData();
                formData.append('memoText', memoText.value);

                status.textContent = '保存中...';
                
                const response = await fetch(GAS_URL, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (result.status === 'success') {
                    status.textContent = '保存しました！';
                    memoText.value = ''; // フォームをクリア
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                status.textContent = 'エラーが発生しました: ' + error.message;
            }
        });
    </script>
</body>
</html>
